:- module(test, []).
:- use_module(input).
:- use_module(event).
:- use_module(data).
:- use_module(effect).

:- observe(view, [window_size]).
:- observe(test, [asd]).

:- subscribe(test, [cool]).

:- dynamic(owner/2).

input:key_route(j, pressed, [_] >> j_pressed).
input:key_route(h, pressed, [_] >> h_pressed).
input:key_route(l, pressed, [_] >> l_pressed).

view:window_size_changed(OldValue, NewValue) :-
	write(OldValue), nl,
	write(NewValue), nl, nl.

j_pressed :-
	key_state(shift, down),
	set(view, window_size, _, p(1200, 800)).

h_pressed :-
	raise(test, cool, cool_event { value: 1 }).

l_pressed :-
	get(test, asd, V),
	(\+ground(V) -> V = 0),
	set(test, asd, _, :=(V+1)).

test:asd_changed(Old, New) :-
	write(Old), write(New), nl.

test:cool(_{value: X}) :-
	write(X), nl.
	
effect:began(_ {effect_id: Id, owner: O}) :-
	assertz(owner(Id, O)), end(Id).
effect:ended(_ {effect_id: Id}) :-
	retract(owner(Id, O)),
	write_dict(O).
