:- module(bomb, []).
:- use_module(anim).
:- use_module(data).
:- subscribe(action, [actor_turn_started, actor_attacked]).

% Bombs leave a fake solid 'bomb' dummy on the ground for as long as the fuse is lit.
% Dummies are a special type of actor that do basically nothing while being inserted in the flow of turns.
% The effect of the fuse is attached to this dummy, so if the dummy moves from its original position, so will the fuse animation and explosion.
% The dummy is given the 'invulnerable' trait when it spawns, which locks its health in place (to 1).
% This trait is removed when the fuse runs out and the effect ends. As soon as the trait is removed, an explosion is triggered.
% The explosion automatically takes care of killing the now-vulnerable dummy.
% Since the dummy is NOT impassible, effects work on it! You can teleport a lit bomb around and it will explode elsewhere.
% When a bomb is attacked, it will roll one tile in the opposite direction.
began :- 
	position(@owner, P),
	args(_{fuse: Fuse}),
	data:fuse set Fuse, 
	spawn([dummy{texture: items, sprite: bomb, solid: true}], [B]),
	data:dummy set B,
	move(B, P),
	anim:stick_to(B, [fade{texture: items, sprite: bomb, tint: light_red, repeat: -1}], StopAnim),
	data:stop_callback set StopAnim,
	fx:start(effect_def(bestow_trait, invulnerable), B, _).
ended :-
	data:dummy get B, 
	data:stop_callback get StopAnim,
	call(StopAnim),
	fx:start(effect_def(remove_trait, invulnerable), B, _),
	args(_{radius: ExplosionRadius}),
	fx:start(effect_def(explosion, ExplosionRadius), B, _).

tick :-
	data:fuse get T,
	data:dummy get B,
	position(B, F, P),
	anim:play_blocking(F, P, [damage_number{damage: T, tint: light_red}], _),
	(	T = 0 
	;   range(0 < T <= 3), Pitch := T / 3,
		atom_concat(countdown, T, Sound),
		sound:play(Sound{floor_id: F, position:P, volume:100, pitch: Pitch})
	).

tock :-
	data:fuse update decrement, 
	data:fuse get -1, end.

%: The player's turn start is chosen instead of another event because animations won't sync with the viewport otherwise
action:actor_turn_started(_{actor: @player}) :- 
	tick, tock.

action:actor_attacked(_{attacker: A, victim: V}) :-
	data:dummy get D, 
	&D.id = V.id,
	position(A, Ap),
	position(V, Vp),
	Dir := Vp - Ap,
	clamp(-1, 1, Dir, NormDir),
	NewPos := Vp + Dir,
	move(V, NewPos).