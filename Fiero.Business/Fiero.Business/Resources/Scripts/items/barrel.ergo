:- module(barrel, []).
:- use_module(effect).
:- use_module(fiero).
:- use_module(actor).
:- use_module(anim).
:- use_module(sound).
:- dynamic(barrel_data/3).
:- subscribe(action, [actor_damaged]).

effect:began(_{effect_id: Id, owner: O, arguments: _{ radius: R }}) :-
	O as physical_entity is PO,
	assertz(barrel_data(Id, id, Id)),
	assertz(barrel_data(Id, owner, PO)),
	assertz(barrel_data(Id, radius, R)).

effect:ended(_{effect_id: Id}) :-
	barrel_data(Id, radius, R),
	barrel_data(Id, owner, O),
	effect(effect_def{name: explosion, arguments: R}, O, _), % this kills the barrel
	retractall(barrel_data(Id, _, _)).

action:actor_damaged(_{victim: _{id: OwnerId}, damage: D}) :-
	D > 0,
	barrel_data(Id, owner, _{id: OwnerId}),
	end(Id).