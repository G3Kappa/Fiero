:- module(reach, []).
:- use_module(fiero).
:- subscribe(action, [actor_moved]).
:- dynamic(reach_data/3).

effect:began(_{effect_id: Id, owner: O, arguments: _{ range: R }}) :-
	assertz(reach_data(Id, O, R)).

effect:ended(_{effect_id: Id}) :-
	retract(reach_data(Id, _, _)).

action:actor_moved(_{actor: _{id: ActorId}, old_position: Old, new_position: New}) :-
	reach:reach_data(_, _{id: ActorId}, R),
	Dir := New - Old,
	clamp(-1, 1, Dir, ClampedDir),
	write(New, ' ', ClampedDir, ' ', R), nl,
	Pos := New + ClampedDir * R,
	reach:reach_attack(ActorId, Pos).

reach_attack(_A, _Pos) :-
	write('reach'), nl.