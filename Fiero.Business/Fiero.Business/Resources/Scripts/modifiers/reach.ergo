:- module(reach, []).
:- use_module(fiero).
:- use_module(event).
:- use_module(random).
:- subscribe(action, [actor_moved]).
:- dynamic(reach_data/3).

effect:began(_{effect_id: Id, owner: O, arguments: _{ range: R }}) :-
	assertz(reach_data(Id, O, R)).

effect:ended(_{effect_id: Id}) :-
	retract(reach_data(Id, _, _)).

action:actor_moved(_{
		actor: _{
			id: ActorId, 
			actor_equipment: _{
				weapon: Weapon
			}
		}, 
		old_position: Old, 
		new_position: New
	}) :-
	reach:reach_data(_, _{id: ActorId}, R),
	eval_point(New - Old, Dir),
	clamp(-1, 1, Dir, ClampedDir),
	for(I, R, 0, -1),
	eval_point(ClampedDir * I, D), 
	eval_point(New + D, Pos),
	reach:reach_attack(ActorId, Pos, Weapon), 
	!.

reach_attack(ActorId, Pos, Weapon) :-
	location(ActorId, l(FloorId, _)),
	at(l(FloorId, Pos), actor { id: OtherId }),
	% TODO: Check that OtherId is hostile to ActorId
	Weapon = _{ 
		props: _{ 
			swing_delay: Delay, 
			base_damage: _{ 
				number_of_dice: Throws, 
				number_of_sides: Sides 
			}
		}
	},
	roll_sum(Throws d Sides, DamageRoll),
	raise(action, actor_attacked, _{ 
		attacker: _{id: ActorId}, 
		victims: [_{id: OtherId}],
		weapons: [Weapon],
		damage: DamageRoll,
		delay: Delay
	}).