% This module is imported implicitly by all game scripts.
% Do not modify unless you know what you are doing.

:- module(fiero, [as/2, '='/2]).
:- op(40, yfx, ['as']).

%%% Used as a prefix for game-related macros to make them stand out more
:- op(50, fx, ['@']).
%%% Shorthand macro for retrieving the player as an actor
:- expand([O] >> (
	@player :- player as actor is O
)).


%: AS-IS expressions are used to cast an entity-proxy to a specific type
%: NOTE: 'as' has a higher precedence than 'is', so this doesn't break arithmetic expressions
%: Example use: player as actor is _P, write_dict(_P)
Entity as Type is Proxy :-
	cast_entity(Entity, Type, Proxy).
%: Assignment of component property, mirrors dict access. Impure, modifies the state of the component.
D.Key = Val :-
	nonvar(D), 
	term_type(Key, atom),
	OldVal = D,
	component_set_value(OldVal, Key, Val),
	!.
%: Toggles a boolean property and optionally performs an action depending on the value.
toggle(Prop, OnTrue, OnFalse) :-
	Value = Prop,
	Value -> 
		(Prop = false, call(OnFalse))
		; (Prop = true, call(OnTrue)).
toggle(Prop, OnTrue) :- toggle(Prop, OnTrue, ()).
toggle(Prop) :- toggle(Prop, (), ()).

%%% DEV CHEATS

%: Toggles collision for the specified entity
noclip(Entity) :-
	Id = Entity.info.name,
	toggle(Entity.physics.phasing, write('noclip on: ', Id), write('noclip off: ', Id)), nl.

noclip :- noclip(@player).