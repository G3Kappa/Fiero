% This module is imported implicitly by all game scripts.
% Do not modify unless you know what you are doing.
:- module(fiero, [as/2, uuid/1, location/2]).
:- use_module(geometry).
:- use_module(script).
:- op(40, yfx, ['as']).
%: Shorthand macro for retrieving the player as an actor
:- expand([O] >> (
	@player :- player as actor is O
)).
:- dynamic(last_uuid/1).
:- inline([as/2]).

%: AS-IS expressions are used to cast an entity-proxy to a specific type
%: NOTE: 'as' has a higher precedence than 'is', so this doesn't break arithmetic expressions
%: Example use: player as actor is _P, write_dict(_P)
Entity as Type is Proxy :-
	cast_entity(Entity, Type, Proxy).
%: TODO: Figure out why this can't be inlined
location(_{ physics: _{ floor_id: FloorId, position: Pos }}, l(FloorId, Pos)).
%: Unify with all entities on the owner's tile (or the player if this is the shell)
here(E) :-
	(owner(O) ; player as actor is O),
    at(O, E).
%: Unify with all entities on the same tile as another physical entity
at(O, E) :-
    location(O, l(FloorId, Pos)),
	at(FloorId, Pos, E).
%: Generate UUID
uuid(Id) :-
	(last_uuid(Last), retract(last_uuid(Last)) ; Last = 0), !,
	Id := Last + 1,
	assertz(last_uuid(Id)).

io:portray('\n') :- write_raw('\n'), !.
%: Overrides stdout writing to automagically include the name of the calling script.
io:portray(X) :-
    current_module(M),
    write_raw(M, ': ', X).