% Do not modify unless you know what you are doing.
:- module(random, [
	one_chance_in/1, n_chances_in/2, 
	dice/3, 
	flip_coin/0, always/0, never/0, 
	rng/3, rng/2, 
	':='/2
]).

:- op(750, fx, [roll]).
:- op(760, xfy, [d]).

rng(Min, Max, R) :-
	rng(N),
	R := Min + N * (Max - Min).
rng(Max, R) :- rng(0, Max, R).

n_chances_in(0, _) :- false, !.
n_chances_in(_, 0) :- false, !.
n_chances_in(Num, Num) :- !.
n_chances_in(Num, Den) :- Num \== Den, rng(N), (N < Num / Den).

one_chance_in(Den) :- n_chances_in(1, Den).

flip_coin :- n_chances_in(1, 2).
always :- n_chances_in(1, 1).
never :- n_chances_in(0, 0).

dice(Throws, Sides, Throw) :-
	for(_, 1, Throws),
	rng(1, Sides, D),
	Throw := floor D. 
	
%: Binds each roll to a variable.
Bind := roll N d S :-
	dice(S, N, Bind).
_ := roll _ d _ :- !, false.
%: Gathers all rolls into a list.
List := [roll N d S] :-
	bagof(T, dice(S, N, T), List), !.
%: Gathers all rolls into an ordered set.
Set  := {roll N d S} :-
	setof(T, dice(S, N, T), Set), !.
%: Sums all rolls.
Sum  := +[roll N d S] :-
	bagof(T, dice(S, N, T), List),
	reduce([A,B,C]>>(C:=A+B), List, Sum), !.
%: Calculates the product of all rolls.
Prod := *[roll N d S] :-
	bagof(T, dice(S, N, T), List),
	reduce([A,B,C]>>(C:=A*B), List, Prod), !.
