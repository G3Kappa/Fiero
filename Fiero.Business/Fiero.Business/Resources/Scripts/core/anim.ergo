% Do not modify unless you know what you are doing.

:- module(anim, []).
:- subscribe(action, [actor_moved]).

begin :-
	data:stick_to_ set _{}.

stop_actor(ActorId) :-
	ActorId as Actor is A,
	data:stick_to_ get Dict,
	(dict_key_value(Dict, ActorId, _{ ids: StuckIds }) -> (
		member(Id, StuckIds),
		anim:stop(Id)
	) ; true),
	Dict = NewDict with { ActorId: _ }.

stick_to(Actor, Animations, Stop) :- 
	data:stick_to_ get Dict,
	ActorId = Actor.id,
	(dict_key_value(Dict, ActorId, _{ anims: StuckAnims, ids: StuckIds }) 
	; StuckAnims = [], StuckIds = []),
	concat(StuckAnims, Animations, NewAnims),
	position(A, P),
	anim:play(P, Animations, [Ids]),
	concat(StuckIds, Ids, NewIds),
	NewDict = Dict with { ActorId: _{ anims: NewAnims, ids: NewIds }},
	data:stick_to_ set NewDict,
	Stop = []>>(
		
	).



action:actor_moved(_ { actor: A }) :- 
	data:anims_ get Anims,
	member(Anims, _ { key: OldId, actor: &A.id, animations: List }),
	position(A, P),
	(data:Key get OldId -> anim:stop(OldId) ; true),
	anim:play(P, Animations, [Id]),
	data:Key set Id.