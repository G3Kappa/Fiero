% This module is imported implicitly by all game scripts.
% Do not modify unless you know what you are doing.

:- module(fiero, [as/2, '='/2, ':='/2, set_counter/2, unset_counter/1, update_counter/3, counter/2]).
:- op(40, yfx, ['as']).
:- dynamic(counter/2).

%%% Shorthand macro for retrieving the player as an actor
:- expand([O] >> (
	@owner :- owner(O)
)).
:- expand([O] >> (
	@player :- player as actor is O
)).

%: AS-IS expressions are used to cast an entity-proxy to a specific type
%: NOTE: 'as' has a higher precedence than 'is', so this doesn't break arithmetic expressions
%: Example use: player as actor is _P, write_dict(_P)
Entity as Type is Proxy :-
	cast_entity(Entity, Type, Proxy).
%: Assignment of component property, mirrors dict access. Impure, modifies the state of the component.
D.Key = Val :-
	nonvar(D), 
	term_type(Key, atom),
	OldVal = D, % Calls dict_deref/2
	component_set_value(OldVal, Key, Val),
	!.
%: Assignment of component property with automatic arithmetic evaluation of the rhs.
D.Key := Val :-
	nonvar(D), 
	term_type(Key, atom),
	ground(Val),
	OldVal = D,
	Eval := Val,
	component_set_value(OldVal, Key, Eval),
	!.
%: Undefines a counter.
unset_counter(Name) :-
	retractall(counter(Name, _)).
%: Defines a counter.
set_counter(Name, Value) :-
	(unset_counter(Name) ; true), !,
	assertz(counter(Name, Value)).
%: Updates the value of a counter.
update_counter(Name, Lambda, NewValue) :-
	counter(Name, OldValue), 
	call(Lambda, OldValue, NewValue),
	set_counter(Name, NewValue).
%: Get entity position
position(_{ id: Id }, P) :-
	Id as physical_entity is _{ physics: _{ position: P } }, !.

move(_{ id: Id }, P) :-
	position(_{ id: Id }, Old),
	raise(action, actor_moved, _{ actor: actor{ id: Id }, old_position: Old, new_position: P }).